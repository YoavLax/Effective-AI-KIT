{
  "name": "effective-ai-kit",
  "publisher": "yoavlax",
  "displayName": "Effective AI Kit",
  "description": "A developer-focused VSCode extension for managing, sharing, and syncing AI chat modes, prompt configurations, and agent instructions. Designed for teams building with AI, streamlines prompt engineering workflows and enables consistent, reusable AI behavior across environments.",
  "version": "1.0.8",
  "engines": {
    "vscode": "^1.105.0"
  },
  "categories": [
    "AI",
    "Chat"
  ],
  "keywords": [
    "ai",
    "chat",
    "prompts",
    "github copilot",
    "chat modes"
  ],
  "icon": "images/icon.png",
  "galleryBanner": {
    "color": "#C80000",
    "theme": "dark"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/YoavLax/Effective-AI-KIT.git"
  },
  "bugs": {
    "url": "https://github.com/YoavLax/Effective-AI-KIT/issues"
  },
  "homepage": "https://github.com/YoavLax/Effective-AI-KIT#readme",
  "activationEvents": [],
  "main": "./out/extension.js",
  "enabledApiProposals": [
    "chatParticipantPrivate"
  ],
  "contributes": {
    "commands": [
      {
        "command": "effective-ai-kit.showInfo",
        "title": "Effective AI Kit"
      }
    ],
    "chatModes": [
      {
        "name": "Azure-architect",
        "description": "Azure Architect chat mode",
        "path": "./chatmodes/azure-architect.chatmode.md"
      },
      {
        "name": "Principal-software-engineer",
        "description": "Principal Software Engineer chat mode",
        "path": "./chatmodes/principal-software-engineer.chatmode.md"
      },
      {
        "name": "Janitor",
        "description": "Clean any codebase by eliminating tech debt",
        "path": "./chatmodes/janitor.chatmode.md"
      }
    ],
    "chatPromptFiles": [
      {
        "name": "az-cost-optimize",
        "description": "Optimize Azure costs and resources",
        "path": "./prompts/az-cost-optimize.prompt.md"
      },
      {
        "name": "azure-resource-health-diagnose",
        "description": "Diagnose Azure resource health issues",
        "path": "./prompts/azure-resource-health-diagnose.prompt.md"
      },
      {
        "name": "boost-prompt",
        "description": "Boost and improve prompt quality",
        "path": "./prompts/boost-prompt.prompt.md"
      },
      {
        "name": "breakdown-feature-implementation",
        "description": "Break down feature implementation into tasks",
        "path": "./prompts/breakdown-feature-implementation.prompt.md"
      },
      {
        "name": "containerize-aspnet-framework",
        "description": "Containerize ASP.NET Framework applications",
        "path": "./prompts/containerize-aspnet-framework.prompt.md"
      },
      {
        "name": "create-agentsmd",
        "description": "Create agents.md documentation",
        "path": "./prompts/create-agentsmd.prompt.md"
      },
      {
        "name": "create-readme",
        "description": "Create README documentation",
        "path": "./prompts/create-readme.prompt.md"
      },
      {
        "name": "dotnet-design-pattern-review",
        "description": ".NET Design Pattern Review",
        "path": "./prompts/dotnet-design-pattern-review.prompt.md"
      },
      {
        "name": "git-flow-branch-creator",
        "description": "Create Git Flow branches",
        "path": "./prompts/git-flow-branch-creator.prompt.md"
      }
    ],
    "chatInstructions": [
      {
        "name": "angular",
        "description": "Angular framework best practices and guidelines",
        "path": "./instructions/angular.instructions.md"
      },
      {
        "name": "ansible",
        "description": "Ansible automation and configuration management",
        "path": "./instructions/ansible.instructions.md"
      },
      {
        "name": "azure-devops-pipelines",
        "description": "Azure DevOps CI/CD pipeline best practices",
        "path": "./instructions/azure-devops-pipelines.instructions.md"
      },
      {
        "name": "blazor",
        "description": "Blazor development guidelines and best practices",
        "path": "./instructions/blazor.instructions.md"
      },
      {
        "name": "containerization-docker-best-practices",
        "description": "Docker containerization best practices",
        "path": "./instructions/containerization-docker-best-practices.instructions.md"
      },
      {
        "name": "csharp",
        "description": "C# programming language best practices",
        "path": "./instructions/csharp.instructions.md"
      },
      {
        "name": "dotnet-architecture-good-practices",
        "description": ".NET architecture and design best practices",
        "path": "./instructions/dotnet-architecture-good-practices.instructions.md"
      },
      {
        "name": "go",
        "description": "Go programming language best practices",
        "path": "./instructions/go.instructions.md"
      },
      {
        "name": "java",
        "description": "Java programming language best practices",
        "path": "./instructions/java.instructions.md"
      },
      {
        "name": "memory-bank",
        "description": "Memory Bank instructions for context management",
        "path": "./instructions/memory-bank.instructions.md"
      },
      {
        "name": "performance-optimization",
        "description": "Performance optimization best practices",
        "path": "./instructions/performance-optimization.instructions.md"
      },
      {
        "name": "rust",
        "description": "Rust programming language best practices",
        "path": "./instructions/rust.instructions.md"
      },
      {
        "name": "terraform",
        "description": "Terraform infrastructure as code best practices",
        "path": "./instructions/terraform.instructions.md"
      },
      {
        "name": "terraform-azure",
        "description": "Terraform Azure-specific best practices",
        "path": "./instructions/terraform-azure.instructions.md"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/vscode": "^1.105.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@typescript-eslint/eslint-plugin": "^8.45.0",
    "@typescript-eslint/parser": "^8.45.0",
    "eslint": "^9.36.0",
    "typescript": "^5.9.3",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2"
  }
}
